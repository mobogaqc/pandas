# Adapted from https://github.com/numba/numba/blob/master/azure-pipelines.yml
jobs:
# Mac and Linux use the same template
- template: ci/azure/posix.yml
  parameters:
    name: macOS
    vmImage: xcode9-macos10.13
- template: ci/azure/posix.yml
  parameters:
    name: Linux
    vmImage: ubuntu-16.04

- template: ci/azure/windows.yml
  parameters:
    name: Windows
    vmImage: vs2017-win2016

- job: 'Checks'
  pool:
    vmImage: ubuntu-16.04
  timeoutInMinutes: 90
  steps:
  - script: |
      # XXX next command should avoid redefining the path in every step, but
      # made the process crash as it couldn't find deactivate
      #echo '##vso[task.prependpath]$HOME/miniconda3/bin'
      echo '##vso[task.setvariable variable=CONDA_ENV]pandas-dev'
      echo '##vso[task.setvariable variable=ENV_FILE]environment.yml'
      echo '##vso[task.setvariable variable=AZURE]true'
    displayName: 'Setting environment variables'

  # Do not require a conda environment
  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      ci/code_checks.sh patterns
    displayName: 'Looking for unwanted patterns'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      sudo apt-get install -y libc6-dev-i386
      ci/setup_env.sh
    displayName: 'Setup environment and build pandas'
    condition: true

  # Do not require pandas
  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      ci/code_checks.sh lint
    displayName: 'Linting'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      ci/code_checks.sh dependencies
    displayName: 'Dependencies consistency'
    condition: true

  # Require pandas
  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      ci/code_checks.sh code
    displayName: 'Checks on imported code'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      ci/code_checks.sh doctests
    displayName: 'Running doctests'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      ci/code_checks.sh docstrings
    displayName: 'Docstring validation'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      ci/code_checks.sh typing
    displayName: 'Typing validation'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      pytest --capture=no --strict scripts
    displayName: 'Testing docstring validaton script'
    condition: true

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      cd asv_bench
      asv check -E existing
      git remote add upstream https://github.com/pandas-dev/pandas.git
      git fetch upstream
      if git diff upstream/master --name-only | grep -q "^asv_bench/"; then
          asv machine --yes
          ASV_OUTPUT="$(asv dev)"
          if [[ $(echo "$ASV_OUTPUT" | grep "failed") ]]; then
              echo "##vso[task.logissue type=error]Benchmarks run with errors"
              echo "$ASV_OUTPUT"
              exit 1
          else
              echo "Benchmarks run without errors"
          fi
      else
          echo "Benchmarks did not run, no changes detected"
      fi
    displayName: 'Running benchmarks'
    condition: true

- job: 'Docs'
  pool:
    vmImage: ubuntu-16.04
  timeoutInMinutes: 90
  steps:
  - script: |
      echo '##vso[task.setvariable variable=CONDA_ENV]pandas-dev'
      echo '##vso[task.setvariable variable=ENV_FILE]environment.yml'
    displayName: 'Setting environment variables'

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      sudo apt-get install -y libc6-dev-i386
      ci/setup_env.sh
    displayName: 'Setup environment and build pandas'

  - script: |
      export PATH=$HOME/miniconda3/bin:$PATH
      source activate pandas-dev
      doc/make.py
    displayName: 'Build documentation'

  - script: |
      cd doc/build/html
      git init
      touch .nojekyll
      git add --all .
      git config user.email "pandas-dev@python.org"
      git config user.name "pandas-docs-bot"
      git commit -m "pandas documentation in master"
    displayName: 'Create git repo for docs build'
    condition : |
      and(not(eq(variables['Build.Reason'], 'PullRequest')),
          eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  # This task to work requires next steps:
  # 1. Got to "Library > Secure files" in the azure-pipelines dashboard: https://dev.azure.com/pandas-dev/pandas/_library?itemType=SecureFiles
  # 2. Click on "+ Secure file"
  # 3. Upload the private key (the name of the file must match with the specified in "sshKeySecureFile" input below, "pandas_docs_key")
  # 4. Click on file name after it is created, tick the box "Authorize for use in all pipelines" and save
  # 5. The public key specified in "sshPublicKey" is the pair of the uploaded private key, and needs to be specified as a deploy key of the repo where the docs will be pushed: https://github.com/pandas-dev/pandas-dev.github.io/settings/keys
  - task: InstallSSHKey@0
    inputs:
      hostName: 'github.com'
      sshPublicKey: 'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDfF0BSddjvZx/z4/2TXsy+RxjwBpgdHkmjtL9WfRHxEw1TchBuEj5vWWcxBNTK+9oVzD/Lca89HAXXrklsfkdAK3LvLfGCxTGpP8t/3CxxFdnSg3EN+4cDGKuDlbeTyzdASdPBOq0GTZjUFekl9ZfFrFJ9SoPpqZ4mmPRPapPrkwTs4xIrBly0eWcISFYgZcG58m65+XQpyyBMbpsO5ZHBBxE8kkWN0yY+gKt5PeeIO82xE+7F+3Qhlc67fKfB4FEitQ5SKrbKyGNNdFtEGcC6CEtD0B0vJxssltQEl5dDWPJP6tH4cIm/J6m28mpSYc5fEBhr75jE4Ybw6NtGgBZEdtFRFlnb91mSiVSjM/HEkV7/xYai+H1Gk+I/8tcl8cf3JCiJSP2glz8bp52+i5it29FUL8ITxdJSo0duUkVm3nZ8cDI6zag+nSSmzdZ1I9Fw7M7RRPHM2zd5+6RskeqamR5lY3Iv+t8Yo8cRX10IiHNF89b+3vI5ZkIKqytrPfrY45jGVMXA6x/whMh94Ac94qm+Do7P3eT/66a1lX0r+UfV6UnfwHE6cZ1ZFX2AzlmSiYMKmTD3hn1GNyHHuvk3Mneanbk4+x+8SjAXIK354zJ8c1Qgk1iEicDvna2IBd94R4tBWjYZ8xH7avmPlhs0HwbjiNOFDc45UXvwIl+D7w== pandas-dev@python.org'
      sshKeySecureFile: 'pandas_docs_key'
    displayName: 'Install GitHub ssh deployment key'
    condition : |
      and(not(eq(variables['Build.Reason'], 'PullRequest')),
          eq(variables['Build.SourceBranch'], 'refs/heads/master'))

  - script: |
      cd doc/build/html
      git remote add origin git@github.com:pandas-dev/pandas-dev.github.io.git
      git push origin master -f
    displayName: 'Publish docs to GitHub pages'
    condition : |
      and(not(eq(variables['Build.Reason'], 'PullRequest')),
          eq(variables['Build.SourceBranch'], 'refs/heads/master'))
