
# See the docstring in versioneer.py for instructions. Note that you must
# re-run 'versioneer.py setup' after changing this section, and commit the
# resulting files.

[versioneer]
VCS = git
style = pep440
versionfile_source = pandas/_version.py
versionfile_build = pandas/_version.py
tag_prefix = v
parentdir_prefix = pandas-

[flake8]
max-line-length = 79
ignore =
    W503,  # line break before binary operator
    W504,  # line break after binary operator
    E402,  # module level import not at top of file
    E731,  # do not assign a lambda expression, use a def
    C406,  # Unnecessary list literal - rewrite as a dict literal.
    C408,  # Unnecessary dict call - rewrite as a literal.
    C409,  # Unnecessary list passed to tuple() - rewrite as a tuple literal.
    S001   # found modulo formatter (incorrect picks up mod operations)
exclude =
    doc/sphinxext/*.py,
    doc/build/*.py,
    doc/temp/*.py,
    .eggs/*.py,
    versioneer.py,
    env  # exclude asv benchmark environments from linting

[flake8-rst]
bootstrap =
    import numpy as np
    import pandas as pd
    np  # avoiding error when importing again numpy or pandas
    pd  # (in some cases we want to do it to show users)
ignore = E402,  # module level import not at top of file
         W503,  # line break before binary operator
         # Classes/functions in different blocks can generate those errors
         E302,  # expected 2 blank lines, found 0
         E305,  # expected 2 blank lines after class or function definition, found 0
         # We use semicolon at the end to avoid displaying plot objects
         E703,  # statement ends with a semicolon
         E711,  # comparison to none should be 'if cond is none:'

exclude =
    doc/source/whatsnew/v0.15.0.rst
    doc/source/whatsnew/v0.15.1.rst
    doc/source/whatsnew/v0.15.2.rst
    doc/source/basics.rst
    doc/source/contributing_docstring.rst
    doc/source/enhancingperf.rst


[yapf]
based_on_style = pep8
split_before_named_assigns = false
split_penalty_after_opening_bracket = 1000000
split_penalty_logical_operator = 30

[tool:pytest]
testpaths = pandas
markers =
    single: mark a test as single cpu only
    slow: mark a test as slow
    network: mark a test as network
    db: tests requiring a database (mysql or postgres)
    high_memory: mark a test as a high-memory only
    clipboard: mark a pd.read_clipboard test
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL
addopts = --strict-data-files
xfail_strict = True

[coverage:run]
branch = False
omit = */tests/*
plugins = Cython.Coverage

[coverage:report]
ignore_errors = False
show_missing = True
# Regexes for lines to exclude from consideration
exclude_lines =
    # Have to re-enable the standard pragma
    pragma: no cover

    # Don't complain about missing debug-only code:
    def __repr__
    if self\.debug

    # Don't complain if tests don't hit defensive assertion code:
    raise AssertionError
    raise NotImplementedError
    AbstractMethodError

    # Don't complain if non-runnable code isn't run:
    if 0:
    if __name__ == .__main__.:

[coverage:html]
directory = coverage_html_report

# To be kept consistent with "Import Formatting" section in contributing.rst
[isort]
known_pre_core=pandas._libs,pandas.util._*,pandas.compat,pandas.errors
known_dtypes=pandas.core.dtypes
known_post_core=pandas.tseries,pandas.io,pandas.plotting
sections=FUTURE,STDLIB,THIRDPARTY,PRE_CORE,DTYPES,FIRSTPARTY,POST_CORE,LOCALFOLDER

known_first_party=pandas
known_third_party=Cython,numpy,dateutil,matplotlib,python-dateutil,pytz,pyarrow,pytest
multi_line_output=4
force_grid_wrap=0
combine_as_imports=True
force_sort_within_sections=True
skip=
    pandas/core/api.py,
    pandas/core/frame.py,
    pandas/tests/api/test_types.py,
    pandas/tests/api/test_api.py,
    pandas/tests/tools/test_numeric.py,
    pandas/tests/dtypes/test_concat.py,
    pandas/tests/dtypes/test_generic.py,
    pandas/tests/dtypes/test_common.py,
    pandas/tests/dtypes/test_cast.py,
    pandas/tests/dtypes/test_dtypes.py,
    pandas/tests/dtypes/test_inference.py,
    pandas/tests/dtypes/test_missing.py,
    pandas/tests/arithmetic/test_numeric.py,
    pandas/tests/arithmetic/test_object.py,
    pandas/tests/arithmetic/test_period.py,
    pandas/tests/arithmetic/test_datetime64.py,
    pandas/tests/arithmetic/conftest.py,
    pandas/tests/arithmetic/test_timedelta64.py,
    pandas/tests/internals/test_internals.py,
    pandas/tests/plotting/test_datetimelike.py,
    pandas/tests/plotting/test_series.py,
    pandas/tests/plotting/test_groupby.py,
    pandas/tests/plotting/test_converter.py,
    pandas/tests/plotting/test_misc.py,
    pandas/tests/plotting/test_frame.py,
    pandas/tests/plotting/test_hist_method.py,
    pandas/tests/plotting/common.py,
    pandas/tests/plotting/test_boxplot_method.py,
    pandas/tests/plotting/test_deprecated.py,
    pandas/tests/sparse/test_indexing.py,
    pandas/tests/extension/test_sparse.py,
    pandas/tests/extension/base/reduce.py,
    pandas/tests/sparse/test_reshape.py,
    pandas/tests/sparse/test_pivot.py,
    pandas/tests/sparse/test_format.py,
    pandas/tests/sparse/test_groupby.py,
    pandas/tests/sparse/test_combine_concat.py,
    pandas/tests/sparse/series/test_indexing.py,
    pandas/tests/sparse/series/test_series.py,
    pandas/tests/sparse/frame/test_indexing.py,
    pandas/tests/sparse/frame/test_to_from_scipy.py,
    pandas/tests/sparse/frame/test_to_csv.py,
    pandas/tests/sparse/frame/test_apply.py,
    pandas/tests/sparse/frame/test_analytics.py,
    pandas/tests/sparse/frame/test_frame.py,
    pandas/tests/sparse/frame/conftest.py,
    pandas/tests/computation/test_compat.py,
    pandas/tests/computation/test_eval.py,
    pandas/types/common.py,
    pandas/tests/extension/arrow/test_bool.py,
    doc/source/conf.py,
    asv_bench/benchmarks/algorithms.py,
    asv_bench/benchmarks/attrs_caching.py,
    asv_bench/benchmarks/binary_ops.py,
    asv_bench/benchmarks/categoricals.py,
    asv_bench/benchmarks/ctors.py,
    asv_bench/benchmarks/eval.py,
    asv_bench/benchmarks/frame_ctor.py,
    asv_bench/benchmarks/frame_methods.py,
    asv_bench/benchmarks/gil.py,
    asv_bench/benchmarks/groupby.py,
    asv_bench/benchmarks/index_object.py,
    asv_bench/benchmarks/indexing.py,
    asv_bench/benchmarks/inference.py,
    asv_bench/benchmarks/io/csv.py,
    asv_bench/benchmarks/io/excel.py,
    asv_bench/benchmarks/io/hdf.py,
    asv_bench/benchmarks/io/json.py,
    asv_bench/benchmarks/io/msgpack.py,
    asv_bench/benchmarks/io/pickle.py,
    asv_bench/benchmarks/io/sql.py,
    asv_bench/benchmarks/io/stata.py,
    asv_bench/benchmarks/join_merge.py,
    asv_bench/benchmarks/multiindex_object.py,
    asv_bench/benchmarks/panel_ctor.py,
    asv_bench/benchmarks/panel_methods.py,
    asv_bench/benchmarks/plotting.py,
    asv_bench/benchmarks/reindex.py,
    asv_bench/benchmarks/replace.py,
    asv_bench/benchmarks/reshape.py,
    asv_bench/benchmarks/rolling.py,
    asv_bench/benchmarks/series_methods.py,
    asv_bench/benchmarks/sparse.py,
    asv_bench/benchmarks/stat_ops.py,
    asv_bench/benchmarks/timeseries.py
